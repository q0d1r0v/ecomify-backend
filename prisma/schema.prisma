generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  name       String
  email      String   @unique
  password   String
  role       Role     @default(CUSTOMER)
  orders     Order[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Rate       Rate[]

  @@map("users")
}

model Category {
  id         String    @id @default(uuid())
  name       String    @unique
  product    Product[]
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  @@map("categories")
}

model Product {
  id          String      @id @default(uuid())
  name        String
  description String?
  price       Decimal     @db.Decimal(10, 2)
  stock       Int         @default(0)
  residue     BigInt      @default(0)
  category_id String
  category    Category    @relation(fields: [category_id], references: [id])
  images      Image[]
  orderItems  OrderItem[]
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  Rate        Rate[]

  @@map("products")
}

model Rate {
  id         String   @id @default(uuid())
  product_id String
  product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  user_id    String
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  rating     Int      @default(5)
  comment    String?
  created_at DateTime @default(now())

  @@map("rates")
}

model Image {
  id         String   @id @default(uuid())
  path       String
  product_id String
  product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("images")
}

model Order {
  id           String      @id @default(uuid())
  user_id      String
  user         User        @relation(fields: [user_id], references: [id])
  status       OrderStatus @default(PENDING)
  orderItems   OrderItem[]
  payments     Payment[]
  total_amount Decimal     @db.Decimal(10, 2)
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt

  @@map("orders")
}

model OrderItem {
  id         String   @id @default(uuid())
  order_id   String
  order      Order    @relation(fields: [order_id], references: [id])
  product_id String
  product    Product  @relation(fields: [product_id], references: [id])
  quantity   Int      @default(1)
  price      Decimal  @db.Decimal(10, 2)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("order_items")
}

model Payment {
  id           String        @id @default(uuid())
  payment_type PaymentType
  order_id     String
  order        Order         @relation(fields: [order_id], references: [id])
  amount       Decimal       @db.Decimal(10, 2)
  status       PaymentStatus @default(PENDING)
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt

  @@map("payments")
}

enum Role {
  CUSTOMER
  ADMIN
  SUPER_ADMIN
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  DISPUTED
}

enum PaymentType {
  CLICK
  PAYME
  UZCARD
  HUMO
  CASH
}
